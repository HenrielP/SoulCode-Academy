# -*- coding: utf-8 -*-
"""Douglas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D_ffvaOv39s6OnQXbv6Xy8o8xdlsiCu2

##Python básico - OPERADORES
"""

# soma (+) Exemplo: some 3 com 2
soma = 3 + 2

# subtração (-) Exemplo: Subtraia 2 de 3
sub = 3 - 2

# multiplicação (*) Exemplo: Multiplique 3 por 2
mult = 3 * 2

# divisão (/) Exemplo: divida 3 por 2
div = 3 / 2

# parte inteira da divisão (//) Exemplo: encontre e guarde a parte inteira da divisão de 3 por 2
idiv = 3 // 2

# resto da divisão (%) Exemplo: encontre e guarde o resto da divisão de 3 por 2
rdiv = 3 % 2

# potenciação (**) Exemplo: eleve 3 a 2
pot = 3 ** 2

print(soma)
print(sub)
print(mult)
print(div)
print(idiv)
print(rdiv)
print(pot)

# Melhorando a visualização dos prints f-string
'''Quando houver necessidade de combinar no mesmo print texto e valores de variáveis o f-s'''
print(f'O resultado da soma de 3 com 2 é: {soma} ')
print(f'O resultado da subtração de 3 com 2 é: {sub} ')
print(f'O resultado da multiplicação de 3 por 2 é: {mult} ')
print(f'O resultado da divisão de 3 por 2 é: {div} ')
print(f'A parte inteira da divisão de 3 por 2 é: {idiv} ')
print(f'O resto da divisão de 3 por 2 é: {rdiv} ')
print(f'O resultado da potenciação de 3 elevado 2 é: {pot} ')

"""##Operadores de comparação (booleanos)"""

# (==) verifica se dois valores são iguais (retorna True ou False)
# Exemplo compare se 3 é igual a 3.0
a = 3 # atribuição do valor 3 (tipo int) para a variável a
b = 3.0 # atribuição do valor 3.0 (tipo float) para a variável b
teste1 = a == b # Fazendo o teste de igualdade de a com b e guradando na variável teste 1
print(teste1) # imprimindo o valor da variável teste1
teste2 = 'douglas' == 'Douglas' # comparando duas strings com uma pequena diferença entre elas
print(teste2) # imprimindo o valor da variável teste2

# (!=) verifica se dois valores são diferentes (retorna True ou False)
# Exemplo: compare se 3 (variável a) é diferente a 3.0 (variável b)
teste3 = a != b
print(teste3)

# (>) verifica se um valor é maior que o outro (retorna True ou False)
# Exemplo: compare se 3 é maior que 2
teste4 = 3 > 2
print(teste4)

# (>=) verifica se um valor é maior ou igual ao outro(Retorna True ou False)
#Exemplo: compare se 3 é maior ou igual a 3
teste5 = 3 >= 3
print(teste5)

# (<) verifica se um número é menor que outro (retorna True ou false)
# Exemplo: compare se 2 é menor que 2
teste6 = 2 < 2
print(teste6)

# (<=) verifica se um valor é menor ou igual ao outro (retorna True ou False)
# Exemplo: compare se 2 é menor ou igual a 2
teste7 = 2 <= 2
print(teste7)

"""##Operadores de atribuição"""

# Atribuição direta (=) atribui ao lado esquerdo do sinal o valor que esta ao lado direito

nome = "Gabriel"
peso_kg = 78
altura_m = 1.78

# Atribuição de incremento (+=), equivale a x = x + y
# Exemplo: Crie uma variavel t que receba o número inteiro 3, e depois some 1 para esta váriavel

t = 3
t +=1

print(f'O resultado de t + 1 é: {t}')

# Atribuição de decremento (-=) equivale a x = x - y
# Exemplo: cie uma variavel z que recebe um número inteiro 5, e depois diminua 2 para essa variavel

z = 5
z -= 2
print(z)

# atribuição de multiplicação (*=) equivale a x = x * y
# Exemplo: crie uma variável j que receba o número 5, e depois multplique por 2
j = 5
j *= 2
print(f'O resultado de j * 2 é: {j}')

# atribuição de divisão (/=) equivale a x = x / y
# exemplo: crie uma variável w que recebe o número 7, e depois divida por 2
w = 7
w /= 2
print(f'O resultado de w / 2 é: {w}')

# atribuição da parte inteira da divisão (//=) equivale a x = x // y
# Exemplo: crie uma variável k que recebe o número 7, e depois receba a parte inteira da divisão por 2
k = 7
k //= 2
print(f'O resultado de k // 2 é: {k}')

# atribuição do resto da divisão (%=) equivale a x = x % y
# exemplo: crie uma variável b que receba o número 7, e depois receba o resto da divisão dela por 2
b = 7
b %= 2
print(f'O resto  da divisão de b por 2 é: {b}')

# atribuição de potenciação (**=) equivale a x = x ** y
# Exemplo crie uma variável casamento que receba o valor 6 e depois receba o quadrado dela
casamento = 6
casamento **= 2
print(f'O professor douglas casará: {casamento} vezes nesta vida')

"""##Operadores lógicos

"""

# (and) Retorna verdadeiro somente se todas as condições de uma comparação forem satisfeitas
# Exemplo:
teste8 = 3 >= 2 and 3 != 2 and 3 < 4
print(f'3 >= 2 and 3 != 2 and 3 < 4 é: {teste8}')
# (&) Retorna verdadeiro somente se todas as condições de uma comparação forem satisfeitas
# Exemplo:
teste9 = (3 <= 2) & (3 != 2) & (3 < 4) #bitwise
#           F           V         V
print(f'(3 <= 2) & (3 != 2) & (3 < 4) é: {teste9}')

# (or) Retorna verdadeiro se pelo menos um dos elementos for verdadeiro
# Exemplo:
teste10 = 3 >= 2 or 3 == 2 or 3 > 4
teste15 = (3 >= 2) | (3 == 2) | (3 > 4)
print(f'3 >= 2 or 3 == 2 or 3 > 43 >= 2 or 3 == 2 or 3 > 4 é: {teste10}')

# (not) Inverte verdadeiro com Falso
# Exemplo:
teste11 = not(teste10)
print(f'not(3 >= 2 or 3 == 2 or 3 > 4) é: {teste11}')
teste12 = not(teste9)
print(f'not((3 <= 2) & (3 != 2) & (3 < 4)) é: {teste12}')
teste13 = ((not(3 <= 2))) & (not(3 == 2)) & (3 < 4) # invertendo o resultado da primeira sentença e da segunda sentença
#               V                 V            V
print(f'((not(3 <= 2))) & (not(3 == 2)) & (3 < 4) é: {teste13}')
teste14 = not((3 >= 2) & (3 != 2) & (3 < 4)) # invertendo o resultado da comparação de todas as sentenças
#                 V         V           V
print(f'not((3 >= 2) & (3 != 2) & (3 < 4)) é: {teste14}')
print(teste15)

"""##Operadores de identidade (is, is not)"""

# (is) compara se um objeto é igual ao outro em relação ao valor e o tipo
h = 3
p = 3
teste16 = p == h
print(f'p == h é: {teste16}')
teste17 = p is h
print(f'p is h é: {teste17}')
m = 3
n = 3.0
teste18 = m == n
print(f'm == n é: {teste18}')
teste19 = m is n
print(f'm is n é: {teste19}')
print(type(m))
print(type(n))

# (is not) compara se um objeto é diferente do outro em relação ao valor e o tipo
x = 3
y = 4
teste20 = x != y
print(f'x != y é: {teste20}')
teste21 = x is not y
print(f'x is not y é: {teste21}')
o = 3
s = 3.0
teste22 = o != s
print(f'o != s é: {teste22}')
teste23 = o is not s
print(f'o is not s é: {teste23}')
print(type(o))
print(type(s))

"""##Operadores de associação"""

# (in) Retorna verdadeiro se um caracter ou sequencia de caracteres for encontrado dentro de uma string
# Exemplo:
nome = 'daniela'
teste24 = 'dani' in nome
print(f'daniela contém dani: {teste24}')
# (not in) Retorna verdadeiro se um caracter ou sequencia de caracteres NÃO for encontrado dentro de uma string
teste25 = 'Dani' not in nome
print(f'daniela não contém Dani: {teste25}')

"""##Coletando informações do usuário"""

nome = input('Informe seu nome ')
print(f'O nome digitado é: {nome}')
peso = int(input('Informe seu peso em kg inteiros '))
print(f'{nome} tem : {peso}kg')
altura = float(input('Informe sua altura em metros '))
print(f'{nome} tem {peso} kg e {altura} metros de altura')
imc = peso / altura**2
print(f'{nome}, seu imc é: {imc:.1f}')

"""##Python Básico - Strings"""

# 0    1   2   3   4   5  6  7  8  9 10 11 12 13 (índice)
# -14 -13 -12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1 (índice reverso)
# 1º 2º 3º 4º 5º 6º 7º 8º 9º 10º 11º 12º 13º 14º (ordinal)
# d  o  u  g  @  g  m  a  i   l   .   c   o   m
email = 'doug@gmail.com'
# encontrando um caracter pelo índice
# Exemplo: qual é o quinto caracter dessa string?
print(f'O quinto caracter dessa string é: {email[4]}')
# Exemplo: qual é o último caracter dessa string?
print(f'O último caracter dessa string é: {email[13]}')
# Exemplo: Quais são os caracteres que vem depois do 2º caracter (excluindo o 2º)
print(f'A sequência caracteres dessa string após o segundo é: {email[2:]}')
# Exemplo: Quais são todos os caracteres dessa string?
print(f'A sequência todos os caracteres dessa string é: {email[:]}')
# Exemplo: buscar e imprimir todos os caracteres até o caracter de índice 4 (todos os caracteres antes do @ até o @ incluindo o @)
print(f'A sequência caracteres dessa string até o índice 4 é: {email[:5]}')
# Exemplo como acessar o último caracter da lista sem contar o tamaho dela (sem usar a função len())?
print(f'O último caracter dessa string é: {email[-1]}')

"""##Métodos para Strings"""

# Sinal de (+) para concatenar strings
nome = 'Douglas'
sobre = 'Ribeiro'
print(nome +" "+ sobre)
# Converter um número em string
cpf = 12345678910
cpf = str(cpf)
print(type(cpf))
# (in) Retorna verdadeiro se um caracter ou sequencia de caracteres for encontrado dentro de uma string
# Exemplo:
nomen = 'daniela'
testen = 'dani' in nomen
print(f'daniela contém dani: {testen}')
# (not in) Retorna verdadeiro se um caracter ou sequencia de caracteres NÃO for encontrado dentro de uma string
testen = 'Dani' not in nomen
print(f'daniela não contém Dani: {testen}')
# (len)Contar o número de caracteres de uma string
qtde = len(nome)
print(f'{nome} tem {qtde} caracteres')

"""##Métodos específicos para strings"""

# Método para deixar a primeira letra de uma string maiúscula
nomem = 'douglas'
print(nomem)
nomem = nomem.capitalize()
print(nomem)
nomem = nomem.casefold()
print(nomem)

# (count) Contar quantas vezes um caracter aparece em uma string
material = 'paralelepípedo'
qtde_p = material.count('p')
print(f'{material} tem {qtde_p} Ps')

# (endswith) Verifica se uma string termina com um caracter ou sequencia de caracteres
email = 'doug@gmail.com'
teste_end = email.endswith('gmail.com')
print(teste_end)

# (startswith) Verifica se uma string começa com um caracter ou sequencia de caracteres
email = 'doug@gmail.com'
teste_beg = email.startswith('d')
print(teste_beg)

# (isnumeric) Verifica se uma string é formada por números
rg = '123456789'
teste_rg = rg.isnumeric()
print(teste_rg)

# (isalpha) Verifica se uma string é formada por letras
rg2 = 'doug'
teste_rg2 = rg2.isalpha()
print(teste_rg2)

# (isalnum) Verifica se uma string é formada por letras ou números
rg3 = 'D'
teste_rg3 = rg3.isalnum()
print(teste_rg3)

# (split) Separa uma string por caracteres específicos, se não for específicado o caracter ela assume espaço como separador
dados = input('informe os valores separados por espaços ')
dados_sep = dados.split()
print(dados_sep)

# (strip) elimina caracteres indesejados de uma string, por padrão remove espaços do início e do final da string
autor = ' Douglas '
print(len(autor))
autor = autor.strip()
print(len(autor))

# (replace) substitui um caracter por outro
preco = 'R$ 10.50'
print(preco)
preco = preco.replace('.',',')
print(preco)

# (title) Coloca a primeira letra de cada palavra em maiúscula
comp = 'douglas almeida ribeiro'
print(comp)
comp = comp.title()
print(comp)

# (upper) Coloca todas as letras de um texto em maiúsculas
prof = 'douglas'
print(prof)
prof = prof.upper()
print(prof)



"""##Exemplos IF / ELSE / ELIF"""

#Exemplo:
#*  Escreva um programa que verifique se um número digitado pelo usuário é positivo, negativo ou zero.
#Passo a passo:
'''
1. Solicite ao usuário que digite um número.
2. Armazene o número digitado em uma variável chamada "numero".
3. Verifique se o número digitado é igual a zero. Se sim, exiba a mensagem "O número digitado é zero."
4. Caso contrário, verifique se o número é maior que zero. Se sim, exiba a mensagem "O número digitado é positivo."
5. Se nenhuma das condições anteriores for atendida, significa que o número é negativo. Nesse caso, exiba a mensagem "O número digitado é negativo."
6. Encerre o programa.'''

numero = float(input("Digite um número: "))

if numero == 0:
    print("O número digitado é zero.")
elif numero > 0:
    print("O número digitado é positivo.")
else:
    print("O número digitado é negativo.")

"""##Atividade de Fundamentos de Python"""

#1. Faça um algoritmo que leia um número inteiro e diga se ele é maior, menor ou igual a 10;

numero = int(input("Digite um número: "))

if numero > 10:
  print("O número escolhido é maior que 10")
elif numero < 10:
  print("O número escolhido é menor que 10")
else:
  print("O número escolhido é igual a 10")

#Faça um algoritmo que leia dois números inteiros e apresente na tela o maior deles ou se eles são iguais;

num1 = int(input("Digite o primeiro número: "))
num2 = int(input("Digite o segundo número: "))

if num1 > num2:
  print("O maior número é", num1)
elif num2 > num1:
  print("O maior número é", num2)
else:
  print("Os 2 numeros informados são iguais")

#Crie um algoritmo que leia um número e diga se ele está no intervalo fechado entre 25 e 200; ]25, 200]

num1 = int(input("Digite um número inteiro "))

if num1 >= 25 and number <= 200:
  print("O número esta dentro do intervalo fechado")
else:
  print('O número escolhido esta fora do intervalo fechado')

#Crie um algoritmo que leia um número e informe na tela se o mesmo é positivo. Caso seja, mostre o número na tela;

num1 = int(input("Digite um número: "))

if num1 > 0:
  print("O número", num1, "é positivo")
else:
  print("O número", num1, "é negativo")

#Crie um algoritmo que leia um número e informe se ele é divisível por 7.

num1 = int(input("Digite um número: "))

if num1 % 7 == 0:
  print("O número", num1, "é divisivel por 7")
else:
  print("O número", num1, "não é divisivel por 7")

#Crie um algoritmo que leia um número e diga se ele é par ou ímpar.

num1 = int(input("Digite um número: "))

if num1 % 2 == 0:
  print("O número", num1, "é par")
else:
  print("O número", num1, "é impar")

#Escreva um programa em Python que solicite ao usuário que digite uma letra. Em seguida, verifique se a letra digitada é uma vogal ou não.

user = input("Digite uma letra: ")

if user == "a" or user == "e" or user == "i" or user == "o" or user == "u":
  print("A letra", user, "é uma vogal")
else:
  print("A letra", user, "é uma consoante")

#Escreva um programa que solicite ao usuário três notas de um aluno e calcule a média.
#Em seguida, exiba a média e uma mensagem informando se o aluno foi aprovado (média maior ou igual a 7) ou reprovado.

n1 = float(input('Digite a sua nota N1: '))
n2 = float(input('Digite a sua nota N2: '))
n3 = float(input('Digite a sua nota N3: '))

notaFinal = (n1 + n2 + n3) / 3

if notaFinal >= 7 and notaFinal < 10:
  print("Você foi aprovado, sua média foi", notaFinal,)
else:
  print("Você está reprovado nessa disciplina, sua média foi", notaFinal)

#Escreva um programa que solicite ao usuário os comprimentos dos três lados de um triângulo.
#Em seguida, exiba uma mensagem informando se o triângulo é equilátero (todos os lados iguais),
#isósceles (dois lados iguais) ou escaleno (todos os lados diferentes).

lado1 = float(input("Digite o comprimento do primeiro lado do triângulo: "))
lado2 = float(input("Digite o comprimento do segundo lado do triângulo: "))
lado3 = float(input("Digite o comprimento do terceiro lado do triângulo: "))

# Verificar o tipo do triângulo
if lado1 == lado2 and lado1 == lado3:
    print("O triângulo é equilátero.")
elif lado1 == lado2 or lado1 == lado3 or lado2 == lado3:
    print("O triângulo é isósceles.")
else:
    print("O triângulo é escaleno.")

#Escreva um programa que solicite ao usuário sua idade e exiba uma mensagem
#informando em qual faixa etária ele se encontra: criança (0-12 anos),
#adolescente (13-17 anos), adulto (18-59 anos) ou idoso (60 anos ou mais).

idade = int(input("Digite a sua idade: "))

if idade <= 12:
  print("Você é uma criança")
elif idade >= 13 and idade <= 17:
  print("Você é um adolescente")
elif idade >= 18 and idade <= 59:
  print("Você é um adulto")
else:
  print("Você é um idoso")

"""##Estruturas de dados em Python - parte 1 Listas"""

# Lista é uma estrutura que pode armazenar diversos valores sobre um determinado atributo
lista_vazia = []
noivo = ['Zé','Mané','Ana','Fran','João','Franz']
print(f'Convidados do noivo - {noivo}')
idades = [41, 47, 46, 28, 17, 50]
print(f'Idades dos convidados do noivo {idades}')
massas = [86, 74, 52, 47, 90, 110]
print(f'Massas dos convidados do noivo {massas}')
alturas = [1.68, 1.74, 1.65, 1.65, 1.80, 1.97]
print(f'Alturas (em metros) dos convidados do noivo {alturas}')

# Acessando um elemento específico da lista a partir do seu índice
print(f'A convidada de honra é {noivo[3]}')
# Criar uma sublista com apenas os os três primeiros elementos da lita noivo
sublista = noivo[:3]
print(sublista)
p_u = [noivo[0], noivo[-1]]
print(f'O primeiro convidado é {p_u[0]} e o último convidado é {p_u[-1]}')
print(f'{noivo}')

# Método index(valor procurado, índice de ínicio da procura, e índice fim da procura) por definição se não for oferecido o índice de ínicio e fim será procurado na lista toda
id = noivo.index('Fran')

# Qual é o imc da convidada Fran
print(f'O IMC da Fran é {(massas[id]/alturas[id]**2):.2f}')

"""Desafio 1':
Crie um programa que receba do usuário um nome e caso esse nome
esteja na lista guarde seu índice em uma variável e a utilize para buscar massa e altura correspondente, bem como calcular seu imc e após tudo isso informar o usuário, caso o nome não esteja na lista retorne uma mensagem informando o usuário
"""

noivo = ['Zé','Mané','Ana','Fran','João','Franz'] # Cria o banco de dados com os nomes dos convidados do noivo
nome = input('Informe o nome que deseja consultar: ') #recebendo o nome do usuário
nome = nome.capitalize() #Deixo o nome que o usuário digitou com a primeira letra em caixa alta e as demais em caixa baixa
if nome in noivo: # se o nome que o usuário digitou estiver no banco de dados faça algo
  id2 = noivo.index(nome) # recebendo o argumento nome e procurando o seu índice já sabendo que ele está na lista exatmente com a mesma grafia
  imc = massas[id2]/alturas[id2]**2 # calculando o imc já sabendo a posição que deve busta em cada lista (massas e alturas)
  print(f'{nome} tem {massas[id2]} kg, {alturas[id2]} metros e seu imc é: {imc:.1f}') # Mostrando o nome digitado e seus respectivos massa, altura e imc
else:
  print(f'Desculpe, {nome} não está na lista, por favor reinicie o programa para consultar outro nome')

# Adicionando elementos em uma lista qualquer com o método append() por padrão este método insero o valor desejado em uma lista existente na última posição
lista_vazia = [] # cria uma lista vazia com o nome lista vazia e apaga todos os elementos de qualquer objeto com o mesmo nome
print(lista_vazia) # imprime uma lista vazia que já existe
lista_vazia.append('Joana') # adiciona Joana na última posição de uma lista que já exista
lista_vazia.append('Douglas')
lista_vazia.append('Eduardo')
lista_vazia.append('Ester')
lista_vazia.append('Daniela')
lista_vazia.append('Pedro')
lista_vazia.append('Maria')
print(lista_vazia) # imprime o status atual da lista vazia
fam = lista_vazia
print(lista_vazia)
print(fam)

fam.insert(3, 'Tobias')
print(fam)

fam[3] = 'Raimundo' # Atribuição direta insere um novo elemento substituindo o anterior se houver
print(fam)

# Excluindo elementos de uma lista
fam.pop() # método que exclui pelo índice, por padrão exclui o último elemento se não informarmos o índice
print(fam)

# Excluir Joana da lista fam pelo método pop
fam.pop(0)
print(fam)

# Excluir raimundo da lista fam pelo método remove
fam.remove('Raimundo')
print(fam)

"""##TRY EXCEPT"""

try:
  ida = int(input('Informe sua idade em anos: '))
  if ida >= 18:
    print('maior de idade')
  elif ida < 0:
    print('você digitou uma idade negativa é isso mesmo? ')
  elif ida <= 17 and ida >= 0:
    print("Você é menor de idade")
except:
  print('você não informou um número, por favor reinicie o código e digite um número')

# criando uma lista com strings
nomes = ['Douglas', 'Daniela', 'Pedro', 'Maria', 'Eduardo', 'Ester']

# criando uma lista com números inteiros
pesos = [78, 25, 98, 63, 92, 67]

# criando uma lista com números fracionários
alturas = [1.85, 1.29, 1.75, 1.67, 1.82, 1.70]

teste2 = input('Informe o nome que deseja excluir da lista: ') # recebe um nome do usuário e o guarda na variável teste
teste2 = teste2.capitalize()# Padroniza a variável teste com a primeira letra maiúscula
try: # comando para tentar fazer alguma ação
  nomes.remove(teste2) # ação que será feita caso a tentativa seja bem sucedida (neste caso se o nome digitado estiver na lista)
  print(f'O nome {teste2} foi excluído com sucesso') # imprime o resultado da exclusão se somente se ela for feita
except: # comando para o caso da tentativa (try) ser mal sucedida (no caso se o nome não estiver na lista)
  print(f'O nome {teste2} não está na lista, logo não pode ser excluído') # Caso o nome digitado não esteja na lista informa o usuário essa situação

"""## Python Básico - Funções"""

# Exemplo de função sem argumento e sem bloco de código
def teste ():
  return print('Bom dia!')

# Chamando a função teste criada no bloco anterior
teste()

# Exemplo de função com argumento e com bloco de código
# crie uma função que receba dois argumentos (x, y) e faça o cálculo de x ** y
def casamento (x, y):
  vezes = x ** y
  return print(f'O professor douglas casará {vezes} vezes nessa vida')

# chamando a função utilizando a ordem padrão dos argumentos
casamento(2, 3)

# Chamando a função invertendo a ordem padrão dos argumentos sem aviso prévio (vai mudar o resultado anterior)
casamento(3, 2)

# Para inverter a ordem padrão dos argumentos é necessário explicitar os valores dos argumentos
casamento(y=3, x=2)

# Também é possível ser redundante e respeitar a ordem padrão dos argumentos e explicitar os seus valores
casamento(x=2, y=3)

'''
Elabore uma função que receba do usuário os valores de preço de venda (p),
custo variável (cv), custo fixo (cf) e calcule o valor do ponto de equlíbrio
em quantidade e informe o usuário.
'''
def peq ():
  p = float(input('Informe o valor do preço unitário de venda em R$: '))
  cv = float(input('Informe o valor do custo variável unitário em R$: '))
  cf = float(input('Informe o valor do custo fixo mensal em R$: '))
  qt = cf/(p - cv)
  return print(f'A partir de aproximadamente {qt:.0f} unidades você terá lucro')

def giro ():
  receita = float(input('Informe a receita líquida em R$: '))
  custo = float(input('Informe o custo em R$: '))
  estoques = float(input('Informe o estoque em R$: '))
  ctas = float(input('Informe as contas a receber em R$: '))
  forne = float(input('Informe os fornecedores em R$: '))
  n = int(input('Informe o período do balanço em dias inteiros: '))
  pme = (estoques/custo)*n
  pmr = (ctas/receita)*n
  pmp = (forne/custo)*n
  co = pme + pmr
  cc = co - pmp
  print(f'O Prazo médio de estoques é  aproximadamente {pme:.0f} dias'),
  print(f'O Prazo médio de recebimento é  aproximadamente {pmr:.0f} dias'),
  print(f'O Prazo médio de pagamento é  aproximadamente {pmp:.0f} dias'),
  print(f'O ciclo operacional é  aproximadamente {co:.0f} dias'),
  print(f'O Ciclo de caixa é  aproximadamente {cc:.0f} dias')
  if pmp > co:
    print(f'Essa empresa em média paga {abs(cc):.0f} dias depois de receber')
  elif pmp < co:
    print(f'Essa empresa em média paga {abs(cc):.0f} dias antes de receber')
  else:
    print('Essa em média empresa no mesmo dia em que recebe')

"""'''
Faça uma função sem parâmetro que ao ser acionada solicite ao usuário uma
sequência númerica em uma única caixa de texto e separada por espaços e então
após o usuário inserir os valores corretos a função devolva um print informando
o valor da média, da variância e do desvio padrão da sequência informada
'''
"""

n = int(input('Informe a quantidade de elementos que deseja na lista (em números inteiros): '))
lista =[]
c = 0
while c < n:
  lista.append(float(input(f'Informe o {c+1}º número da lista: ')))
  c += 1
print(lista)